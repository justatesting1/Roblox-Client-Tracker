return function()
	local ArgCheck = require(script.Parent.ArgCheck)

	describe("isNonNegativeNumber", function()
		it("should assert if given non-number, or negative number", function()
			expect(function()
				ArgCheck.isNonNegativeNumber(nil, "")
			end).to.throw()
			expect(function()
				ArgCheck.isNonNegativeNumber({}, "")
			end).to.throw()
			expect(function()
				ArgCheck.isNonNegativeNumber("string", "")
			end).to.throw()
			expect(function()
				ArgCheck.isNonNegativeNumber(-1, "")
			end).to.throw()
		end)

		it("should return the value if it is a non-negative number", function()
			expect(ArgCheck.isNonNegativeNumber(0, "")).to.equal(0)
			expect(ArgCheck.isNonNegativeNumber(1, "")).to.equal(1)
		end)
	end)

	describe("isType", function()
		it("should assert if type is wrong", function()
			expect(function()
				ArgCheck.isType(nil, "number", "")
			end).to.throw()
			expect(function()
				ArgCheck.isType("test", "number", "")
			end).to.throw()
			expect(function()
				ArgCheck.isType(5, "string", "")
			end).to.throw()
			expect(function()
				ArgCheck.isType(5, "table", "")
			end).to.throw()
		end)

		it("should return the value if the type is correct", function()
			expect(ArgCheck.isType(0, "number", "")).to.equal(0)
			expect(ArgCheck.isType("test", "string", "")).to.equal("test")
		end)
	end)

	describe("isInTypes", function()
		it("should assert if type is not expected", function()
			expect(function()
				ArgCheck.isInTypes(nil, {"number", "string", "table"}, "")
			end).to.throw()
			expect(function()
				ArgCheck.isInTypes("test", {"number", "table"}, "")
			end).to.throw()
			expect(function()
				ArgCheck.isInTypes(5, {"string", "table"}, "")
			end).to.throw()
			expect(function()
				ArgCheck.isInTypes({}, {"number", "string"}, "")
			end).to.throw()
		end)

		it("should return the value if the type is expected", function()
			expect(ArgCheck.isInTypes(0, {"number", "string"}, "")).to.equal(0)
			expect(ArgCheck.isInTypes("test", {"table", "string"}, "")).to.equal("test")
			local testTable = {}
			expect(ArgCheck.isInTypes(testTable, {"table", "string"}, "")).to.equal(testTable)
			local testFunction = function() end
			expect(ArgCheck.isInTypes(testFunction, {"function", "string"}, "")).to.equal(testFunction)
		end)
	end)

	describe("isTypeOrNil", function()
		it("should assert if type is wrong", function()
			expect(function()
				ArgCheck.isTypeOrNil("test", "number", "")
			end).to.throw()
			expect(function()
				ArgCheck.isTypeOrNil(5, "string", "")
			end).to.throw()
			expect(function()
				ArgCheck.isTypeOrNil(5, "table", "")
			end).to.throw()
		end)

		it("should return the value if the type is correct", function()
			expect(ArgCheck.isTypeOrNil(nil, "number", "")).to.equal(nil)
			expect(ArgCheck.isTypeOrNil(0, "number", "")).to.equal(0)
			expect(ArgCheck.isTypeOrNil("test", "string", "")).to.equal("test")
		end)
	end)

	describe("isNotNil", function()
		it("should assert if type is nil", function()
			expect(function()
				ArgCheck.isNotNil(nil, "")
			end).to.throw()
		end)

		it("should return the value if it's not nil", function()
			expect(ArgCheck.isNotNil(0, "")).to.equal(0)
			expect(ArgCheck.isNotNil("test", "")).to.equal("test")
			local testTable = {}
			expect(ArgCheck.isNotNil(testTable, "")).to.equal(testTable)
			local testFunction = function() end
			expect(ArgCheck.isNotNil(testFunction, "")).to.equal(testFunction)
		end)
	end)

	describe("isEqual", function()
		it("should assert if not equal", function()
			expect(function()
				ArgCheck.isEqual(0, nil, "")
			end).to.throw()
			expect(function()
				ArgCheck.isEqual(2, 1, "")
			end).to.throw()
			expect(function()
				ArgCheck.isEqual("", "test", "")
			end).to.throw()
			expect(function()
				ArgCheck.isEqual({}, {}, "")
			end).to.throw()
			expect(function()
				ArgCheck.isEqual(function() end, function() end, "")
			end).to.throw()
		end)

		it("should return the value if value is equal to expected value", function()
			expect(ArgCheck.isEqual(nil, nil, "")).to.equal(nil)
			expect(ArgCheck.isEqual(0, 0, "")).to.equal(0)
			expect(ArgCheck.isEqual(true, true, "")).to.equal(true)
			expect(ArgCheck.isEqual("test", "test", "")).to.equal("test")
			local testTable = {}
			expect(ArgCheck.isEqual(testTable, testTable, "")).to.equal(testTable)
			local testFunction = function() end
			expect(ArgCheck.isEqual(testFunction, testFunction, "")).to.equal(testFunction)
		end)
	end)
end
